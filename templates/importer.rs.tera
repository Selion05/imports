{%  for mod in modules %}
mod {{ mod }};
{%- endfor %}

#[cfg(test)]
mod tests;


use crate::ImportError;
use calamine::{open_workbook_auto, DataType, Reader};
use serde::Serialize;
use std::fmt::Debug;
use std::collections::HashMap;

{%  for use in uses %}
use {{ use }};
{%- endfor %}

#[derive(Debug, Serialize)]
#[serde(rename_all = "camelCase")]
pub struct Row {
{%  for value in columns %}
    {{ value.field_name }}: {{ value.type_hint }},
{%- endfor %}
}


#[derive(Debug)]
enum Column {
{%  for value in columns %}
    {{ value.enum_name }},
{%- endfor %}
}

impl Into<usize> for Column {
    fn into(self) -> usize {
        self as usize
    }
}

impl Column {
    fn usize(self) -> usize {
        self as usize
    }
}

fn get_column_map(headers: Vec<String>) -> Result<Vec<usize>, ImportError> {
    let mut map: Vec<Option<usize>> = vec![None;  {{ columns | length }}];
    for (i, header) in headers.iter().enumerate() {
        match header.to_lowercase().trim() {
            {%  for value in columns %}
            "{{ value.match_string }}" => {
                map[<Column as Into<usize>>::into(Column::{{ value.enum_name }})] = Some(i);
            }
            {% if value.match_string2 %}

            "{{ value.match_string2 }}" => {
                map[<Column as Into<usize>>::into(Column::{{ value.enum_name }})] = Some(i);
            }
            {% endif %}
            {%- endfor %}
            _ => return Err(ImportError::UnknownHeader(header.clone())),
        }
    }

    for (_i, h) in map.clone().into_iter().enumerate() {
        // todo how to get enum from index _i?
        match h {
            Some(_) => {}
            None => return Err(ImportError::MissingHeader("todo".to_string())),
        }
    }

    Ok(map.into_iter().flatten().collect())
}




pub fn run<P: AsRef<std::path::Path>>(path: P) -> Result<HashMap<String, Vec<Row>>, ImportError> {
    let mut excel = open_workbook_auto(path)?;

    // todo input
    let header_row = {{ header_row_number }};
    let data_start_row =  {{ data_start_row_number }};
    let sheet_names = excel.sheet_names().to_vec();
    let sheet_name = sheet_names.first().unwrap();

    let sheet = excel
            .worksheet_range(sheet_name)
            .ok_or_else(|| ImportError::SheetNotFound(sheet_name.to_string()))??;

    let headers: Vec<String> = sheet
            .rows()
            .nth(header_row)
            .unwrap()
            .iter()
            .map(|header_cell| {
                return match header_cell.get_string() {
                    None => String::from(""),
                    Some(v) => v.to_string(),
                };
            })
            .collect();
    let column_map: Vec<usize> = get_column_map(headers)?;

    let mut groups: HashMap<String, Vec<Row>> = HashMap::new();
    for (i, row) in sheet.rows().enumerate().skip(data_start_row) {
        let r = transform_row(&column_map, row, i)?;
        let k = r.{{ group_key }}.clone();
        if !groups.contains_key(&*k) {
            groups.insert(k.clone(), Vec::new());
        }
        groups.get_mut(&*k).unwrap().push(r);
        // rows.push(r);
    }

    Ok(groups)
}

fn transform_row(
    column_map: &[usize],
    row: &[DataType],
    row_number: usize,
) -> Result<Row, ImportError> {
    let r = Row {

        {%  for value in columns %}

        {% if value.kind == "string" %}
        {{ value.field_name }}: row[column_map[Column::{{ value.enum_name }}.usize()]]
                .to_string().trim().to_string(),
        {% elif value.kind =="enum" %}
        {{ value.field_name }}: {{ value.enum_ }}::from_excel_value(row[column_map[Column::{{ value.enum_name }}.usize()]].to_string())
        .map_err(|e| ImportError::ValueError(row_number, "{{ value.header_name }}".to_string(), e))?{% if not value.optional %}
        .ok_or_else(|| {
        ImportError::ValueError(
        row_number,
        "{{ value.header_name }}".to_string(),
        "Cell has no value".to_string(),
        )
        })?,{% endif %}
        {% elif value.kind =="float" %}
        {{ value.field_name }}: row[column_map[Column::{{ value.enum_name }}.usize()]]
                .get_float(){% if  value.optional %},{% endif %}
        {% if not value.optional %}
                .ok_or_else(|| {
                    ImportError::ValueError(
                        row_number,
                        "{{ value.header_name }}".to_string(),
                        "Cell has no value".to_string(),
                    )
                })?,{% endif %}

        {% elif value.kind =="date" %}

        {{ value.field_name }}: row[column_map[Column::{{ value.enum_name }}.usize()]].as_date(){% if value.optional %},{% endif %}
        {% if not value.optional %}
        .ok_or_else(|| {
            ImportError::ValueError(
                row_number,
                "{{ value.header_name }}".to_string(),
                "Cell has no value".to_string(),
            )
        })?,{% endif %}
        {% elif value.kind =="time" %}

        {{ value.field_name }}: row[column_map[Column::{{ value.enum_name }}.usize()]].as_time(){% if value.optional %},{% endif %}
        {% if not value.optional %}
        .ok_or_else(|| {
            ImportError::ValueError(
                row_number,
                "{{ value.header_name }}".to_string(),
                "Cell has no value".to_string(),
            )
        })?,{% endif %}
        {% else %}
        // todo  implement something for {{ value.kind }}
        {% endif %}


        {%- endfor %}

    };

    Ok(r)
}